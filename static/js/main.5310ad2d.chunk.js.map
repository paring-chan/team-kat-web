{"version":3,"sources":["routes/Main.js","routes/NotFound.js","components/Navbar.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["StyledCarousel","styled","div","process","Main","Button","variant","NotFound","Bar","Navbar","collapseOnSelect","bg","fixed","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","DivContainer","Footer","to","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wjBAKA,IAAMA,EAAiBC,IAAOC,IAAV,cACWC,GADX,oBA4BLC,EARF,kBACT,kBAACJ,EAAD,KACI,wCACA,kFACA,kBAACK,EAAA,EAAD,CAAQC,QAAU,iBAAlB,8BCvBOC,EAJE,kBACb,4C,gBCoBWC,EApBH,kBACR,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,GAAK,QAAQC,MAAQ,MAAMC,OAAS,MACzD,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAO,KAArB,YACA,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAgB,0BAE/B,kBAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAK,yBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAY,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAO,aAAjB,YACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAO,YAAjB,WACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAO,YAAjB,YAEJ,6BACA,kBAACK,EAAA,EAAD,KACI,kBAACA,EAAA,EAAIE,KAAL,CAAUP,KAAO,UAAjB,SACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAO,8BAAjB,c,6QCbhB,IAAMQ,EAAetB,IAAOC,IAAV,KA0BHsB,EAXA,kBACX,kBAACD,EAAD,KACI,kDACS,uBAAGR,KAAO,+BAAV,YAAoD,6BACzD,uBAAGA,KAAO,+BAAV,UAFJ,MAEyD,uBAAGA,KAAO,8BAAV,WAAkD,6BACvG,kBAAC,IAAD,CAAMU,GAAK,QAAX,4BAHJ,MAGoC,kBAAC,IAAD,CAAMA,GAAK,WAAX,oDAAoC,6BAHxE,6CCAOC,EAXH,kBACR,kBAAC,IAAD,CAAeC,SAAYxB,IACvB,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAO,IAAIC,UAAa1B,IACrC,kBAAC,IAAD,CAAO0B,UAAavB,KAExB,kBAAC,EAAD,QCLYwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5310ad2d.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components'\n\nimport { Button } from 'react-bootstrap'\n\nconst StyledCarousel = styled.div`\n    background-image: url(${`${process.env.PUBLIC_URL}/image/code.jpg`});\n    background-size: 100%;\n\n    width: 100vw;\n    height: 50vh;\n\n    color: white;\n    \n    text-align: center;\n\n    h1 {\n        padding-top: 17vh;\n    }\n    \n    button {\n        width: 200px;\n    }\n`\n\nconst Main = () => (\n    <StyledCarousel>\n        <h1>Team Kat</h1>\n        <h3>푸른 소년 팀입니다</h3>\n        <Button variant = 'outline-light'>지원하기</Button>\n    </StyledCarousel>\n)\n\nexport default Main","import React from 'react';\n\nconst NotFound = () => (\n    <h1>Hello World</h1>\n)\n\nexport default NotFound","import React from 'react';\nimport { Navbar, Nav } from 'react-bootstrap'\n\nconst Bar = () => (\n    <Navbar collapseOnSelect bg = 'light' fixed = 'top' expand = 'lg'>\n        <Navbar.Brand href = '/'>Team KAT</Navbar.Brand>\n        <Navbar.Toggle aria-controls = 'responsive-navbar-nav' />\n\n        <Navbar.Collapse id = 'responsive-navbar-nav'>\n            <Nav className = 'mr-auto'>\n                <Nav.Link href = '/projects'>Projects</Nav.Link>\n                <Nav.Link href = '/members'>Members</Nav.Link>\n                <Nav.Link href = '/recruit'>Recruit</Nav.Link>\n            </Nav>\n            <hr />\n            <Nav>\n                <Nav.Link href = '/login'>Login</Nav.Link>\n                <Nav.Link href = 'https://discord.gg/R5UG5mR'>Server</Nav.Link>\n            </Nav>\n        </Navbar.Collapse>\n    </Navbar>\n)\n\nexport default Bar","import React from 'react';\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\n\nconst DivContainer = styled.div`\n    position:absolute;\n    bottom: 0;\n    background-color: grey;\n    text-align: center;\n    color: white;\n\n    height: 30vh;\n    width: 100vw;\n\n    p {\n        padding-top: 7vh;\n    }\n`\n\nconst Footer = () => (\n    <DivContainer>\n        <p>\n            대표자: <a href = 'https://github.com/kiki7000'>kiki7000</a><br />\n            <a href = 'https://github.com/Team-Kat'>GITHUB</a> | <a href = 'https://discord.gg/R5UG5mR'>Discord</a><br />\n            <Link to = '/tos'>이용약관</Link> | <Link to = '/policy'>개인정보처리방침</Link><br />\n            © 2020 Team Kat. All Right Reserved.\n        </p>\n    </DivContainer>\n)\n\nexport default Footer","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport './style/global.css'\n\nimport Main from './routes/Main'\nimport NotFound from './routes/NotFound'\n\nimport NavBar from './components/Navbar'\nimport Footer from './components/Footer'\n\nconst App = () => (\n    <BrowserRouter basename = {process.env.PUBLIC_URL}>\n        <NavBar />\n        <Switch>\n            <Route exact path = '/' component = {Main} />\n            <Route component = {NotFound} />\n        </Switch>\n        <Footer />\n    </BrowserRouter>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}